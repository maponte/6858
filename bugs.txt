#
# [file:#lines]
# desc
#

[http.c:105]
It's actually not clear if this is url_decode's fault, because http_request_line doesn't even get the size of the buffer reqpath, but reqpath overflows in url_decode if you send a large request, overwriting fd in send_req.

    url_decode(reqpath, sp1);

[http.c:159]
Very similar to the previously mentioned bug, url_decode will overflow the 512 byte buffer, value, if any request header has a value long enough (with no premature \0's).

    url_decode(value, sp);

[http.c:95]
The buffer env can be overflowed by 16 bytes due to an overlooked issue in the allocation of the env versus the buf variables. They are both 8192 bytes, but the sprintf prepends "SERVER_PROTOCOL=" which may let us write past the 8192 bytes allocated.

    envp += sprintf(envp, "SERVER_PROTOCOL=%s", sp2) + 1;

[http.c:255]
pn is a 1024 byte buffer. strcat is called with name as source, which is not checked for length. name is supplied by the request uri, so it can overflow pn.

    strcat(pn, name);

[http.c:317]
dir_join does no checking on the length of either of its arguments, which we might exploit to overflow dir if dirname is long enough.

    strcpy(dst, dirname);
